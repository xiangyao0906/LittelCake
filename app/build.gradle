apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
kapt {
    generateStubs = true
}

/**
 * 初始化本地开发者配置
 */
def launchActivity = ''
def localHost = ''
task loadProperties() {
    def proFile = file("../local.properties")
    if (proFile != null) {
        Properties p = new Properties()
        proFile.withInputStream { stream ->
            p.load(stream)
        }
        if (p.launchActivity) {
            launchActivity = p.launchActivity
        }
        if (p.localHost) {
            localHost = p.localHost
        }
    }
}
/**
 * 初始化签名信息
 */
// RELEASE
def KEY_PASSWORD = ''
def KEYSTORE_NAME = ''
def KEYSTORE_PASSWORD = ''
// BETA
def KEY_PASSWORD_BETA = ''
def KEYSTORE_NAME_BETA = ''
def KEYSTORE_PASSWORD_BETA = ''
// 渠道
def CHANNEL = ''


task initKeyStore() {
    def proFile = file('../signing.properties')
    if (proFile != null) {
        Properties p = new Properties()
        proFile.withInputStream { stream ->
            p.load(stream)
        }
        if (p.KEY_PASSWORD) {
            KEY_PASSWORD = p.KEY_PASSWORD
        }
        if (p.KEYSTORE_NAME) {
            KEYSTORE_NAME = p.KEYSTORE_NAME
        }
        if (p.KEYSTORE_PASSWORD) {
            KEYSTORE_PASSWORD = p.KEYSTORE_PASSWORD
        }
        if (p.KEYSTORE_PASSWORD_BETA) {
            KEYSTORE_PASSWORD_BETA = p.KEYSTORE_PASSWORD_BETA
        }
        if (p.KEY_PASSWORD_BETA) {
            KEY_PASSWORD_BETA = p.KEY_PASSWORD_BETA
        }
        if (p.KEYSTORE_NAME_BETA) {
            KEYSTORE_NAME_BETA = p.KEYSTORE_NAME_BETA
        }
    }
}

static def releaseTime() {
    return new Date().format("yyyyMMddHHmm", TimeZone.getTimeZone("UTC"))
}

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "com.xinly.cake"
        minSdkVersion 23
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        ndk {
            // 设置支持的SO库架构
            abiFilters 'armeabi', 'armeabi-v7a', "x86"

        }
        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath true
            }
        }
        /**
         * common
         */
        resValue("string", "app_label", "CAKE")
        multiDexEnabled true
        flavorDimensions 'cake'

        lintOptions {
            checkReleaseBuilds false
            // Or, if you prefer, you can continue to check for errors in release builds,
            // but continue the build even when errors are found:
            abortOnError false
        }
    }
    signingConfigs {
        /**
         * beta 版本的签名文件
         */
        beta {
            storeFile file('../key/xinly_beta.jks')
            storePassword KEY_PASSWORD_BETA
            keyAlias KEYSTORE_NAME_BETA
            keyPassword KEYSTORE_PASSWORD_BETA
            v2SigningEnabled true
        }
        /**
         * release 版本的签名文件
         */
        release {
            storeFile file('../key/xinly.jks')
            storePassword KEY_PASSWORD
            keyAlias KEYSTORE_NAME
            keyPassword KEYSTORE_PASSWORD
            v2SigningEnabled true
        }
    }


    /**
     * build type 用来构建不同的变种
     */
    buildTypes {
        /**
         -debug 面向开发者
         */
        debug {
            applicationIdSuffix ".debug"
            resValue("string", "app_label", "Cake-Debug")
            signingConfig signingConfigs.release
            buildConfigField "String", "API_HOST", "\"${localHost == '' ? rootProject.ext.host_default : localHost}\""
            buildConfigField "String", "MD5_SALT", "\"${rootProject.ext.md5_salt}\""
            buildConfigField "String", "LaunchActivity", "\"${launchActivity}\""
            buildConfigField "String", "CHANNEL", "\"${CHANNEL}\""
            manifestPlaceholders = [
                    CHANNEL: "${CHANNEL}",
            ]
        }

        /**
         -beta 面向测试小伙伴
         */
        beta {
            resValue("string", "app_label", "Cake-Beta")
            applicationIdSuffix ".beta"
            signingConfig signingConfigs.beta
            debuggable true
            minifyEnabled true
            shrinkResources true
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField "String", "API_HOST", "\"${rootProject.ext.host_beta}\""
            buildConfigField "String", "MD5_SALT", "\"${rootProject.ext.md5_salt}\""
            buildConfigField "String", "CHANNEL", "\"${CHANNEL}\""
            manifestPlaceholders = [
                    CHANNEL: "${CHANNEL}",
            ]
        }

        /**
         -release 面向正式用户
         */
        release {
            signingConfig signingConfigs.release
            debuggable false
            minifyEnabled true
            shrinkResources true
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField "String", "API_HOST", "\"${rootProject.ext.host_release}\""
            buildConfigField "String", "MD5_SALT", "\"${rootProject.ext.md5_salt}\""
            buildConfigField "String", "CHANNEL", "\"${CHANNEL}\""
            manifestPlaceholders = [
                    CHANNEL: "${CHANNEL}",
            ]
        }
    }

    /**
     * 渠道
     */
    productFlavors {
        cake {
            CHANNEL = 'cake'
        }
    }

/**
 * 重命名apk
 * 将apk到../output/apk
 */
    applicationVariants.all { variant ->
        if (variant.buildType.name == 'release') {
            variant.assemble.doLast {
                variant.outputs.each { output ->
                    def outputFile = output.outputFile
                    if (outputFile != null && outputFile.name.endsWith('release.apk')) {
                        def fileName = "${variant.flavorName}_v${defaultConfig.versionName}_${releaseTime()}"
                        def outputPath = "../output/apk"
                        copy {
                            from outputFile
                            into outputPath
                            rename { fileName + ".apk" }
                        }
                    }
                }
            }
        }
    }
    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }

    dataBinding {
        enabled = true
    }

    lintOptions {
        disable 'MissingTranslation'
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    implementation 'androidx.multidex:multidex:2.0.0'
    // 上拉加载
    implementation rootProject.ext.dependencies["smartrefresh"]
    //状态栏 {@link https://github.com/gyf-dev/ImmersionBar}
    implementation 'com.gyf.immersionbar:immersionbar:3.0.0'
    // 基础库
    implementation project(':librarys:XinlyCore')
    //zxing
    implementation project(':librarys:lib-zxing')
    //更新
    implementation project(':librarys:Upgrade')

    implementation 'me.jessyan:autosize:1.2.0'

    //完整版引入
    implementation 'com.shuyu:GSYVideoPlayer:7.1.2'
    //BottomNavigation
    implementation 'com.ashokvarma.android:bottom-navigation-bar:2.2.0'
    implementation project(path: ':OpenGLlibrary')
    implementation 'com.github.yangjie10930:EpMedia:v0.9.5'

    implementation 'com.google.android.material:material:1.1.0'

}
